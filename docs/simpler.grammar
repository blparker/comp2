
program     = block

block       = statement { NEWLINE statement }
inner_block = INDENT block DEDENT

statement   = if_stmt
            | for_stmt
            | while_stmt
            | assign_stmt
            | function_call
            | arith_stmt

assign_stmt = 'var' IDENTIFIER [ '=' expr ]
            | IDENTIFIER '=' expr

if_stmt       = 'if' expr NEWLINE inner_block { 'else if' expr NEWLINE inner_block } [ 'else' NEWLINE inner_block ]
for_stmt      = expanded_for | condensed_for
expanded_for  = 'for' IDENTIFIER '=' expr ',' expr, [ ',' expr ] NEWLINE inner_block
condensed_for = 'for' identifier_list 'in' expr_list NEWLINE inner_block

while_stmt    = 'while' expr NEWLINE inner_block

compound_stmt = simple_arith [ relop simple_arith ]
simple_arith  = term { addop term }
relop         = '<=' | '<' | '>' | '>=' | '==' | '!='
addop         = '+' | '-'
term          = factor { mulop factor }
mulop         = '*' | '/'
factor        = '(' compound_stmt ')' | simple_type | function_call

expr        = expr_rest [ relop expr ] | expr_rest
expr_rest   = null
            | function_call
            | compound_stmt
            | simple_type

simple_type = true | false | NUMBER | STRING | IDENTIFIER

function_call = IDENTIFIER '(' [ expr_list ] ')'
              | IDENTIFIER expr_list

expr_list       = { expr ',' } expr
identifier_list = IDENTIFIER { ',' IDENTIFIER }



/* Eliminating left recursion */
expr  = expr [ relop expr ] | function_call | simple_type
expr  = function_call expr' | simple_type expr'
expr' = [ relop expr] expr' | e
/* End eliminating left recursion */


expr = expr op expr

compound_stmt = simple_arith [ relop simple_arith ]
simple_arith  = term { addop term }
relop         = '<=' | '<' | '>' | '>=' | '==' | '!='
addop         = '+' | '-'
term          = factor { mulop factor }
mulop         = '*' | '/'
factor        = '(' compound_stmt ')' | simple_type | function_call

expr        = expr_rest [ relop expr ]
expr_rest   = null
            | function_call
            | compound_stmt
            | simple_type
