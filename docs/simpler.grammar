
program     = block

block       = statement { NEWLINE statement }
inner_block = INDENT block DEDENT

statement   = if_stmt
            | for_stmt
            | while_stmt
            | do_while_stmt
            | func_def_stmt
            | class_def_stmt
            | interface_def_stmt
            | switch_stmt
            | assign_stmt
            | function_call
            | arith_stmt

assign_stmt = 'var' IDENTIFIER [ '=' expr ]
            | compound_id '=' expr

// assignable    = IDENTIFIER { selector }
compound_id   = variable_type { '[' [ expr ] ']' } [ '.' compound_id ]

variable_type = IDENTIFIER | function_call

if_stmt       = 'if' expr NEWLINE inner_block { 'else if' expr NEWLINE inner_block } [ 'else' NEWLINE inner_block ]
for_stmt      = expanded_for | condensed_for
expanded_for  = 'for' IDENTIFIER '=' expr ',' expr, [ ',' expr ] NEWLINE inner_block
condensed_for = 'for' identifier_list 'in' expr_list NEWLINE inner_block

while_stmt     = 'while' expr NEWLINE inner_block
do_while_stmt  = 'do' NEWLINE inner_block 'while' expr NEWLINE
func_def_stmt  = IDENTIFIER '=' [ func_args_list ]  '->' NEWLINE inner_block
func_args_list = '(' [ id_list ] ')'
id_list        = IDENTIFIER { ',' IDENTIFIER }

class_def_stmt = [ class_entry ] 'class' IDENTIFIER [ class_def_rest ] NEWLINE class_body
class_entry    = 'abstract' | 'final'
class_def_rest = [ 'extends' IDENTIFIER ] [ 'implements' id_list ]
class_body     = INDENT { class_stmt } DEDENT
class_stmt     = class_method | class_prop | class_const
class_method   = [ access_modifier ] { access_level } function_def_stmt
access_modifer = 'public' | 'private' | 'protected' 
access_level   = 'static' | 'abstract' | 'final'
class_prop = access_modifier [ 'static' ] IDENTIFIER [ '=' static_scalar ]
           | [ access_modifier ] 'static' IDENTIFIER [ '=' static_scalar ]
           | [ access_modifier ] [ 'static' ] IDENTIFIER '=' static_scalar
static_scalar  = simple_type | array_decl | static_class_reference
class_const    = 'const' IDENTIFIER '=' simple_type { ',' IDENTIFIER '=' simple_type }

interface_def_stmt = 'interface' IDENTIFIER [ 'extends' id_list ] NEWLINE interface_body
interface_body     = INDENT { interface_stmt } DEDENT
interface_stmt     = interface_method | class_const
interface_method   = [ 'public' ] IDENTIFIER '=' '(' [ id_list ] ')'

switch_stmt    = 'switch' expr NEWLINE INDENT { switch_case } [ 'default' NEWLINE inner_block ] NEWLINE DEDENT
switch_case    = 'case' expr_list NEWLINE inner_block NEWLINE

compound_stmt = simple_arith [ relop simple_arith ]
simple_arith  = term { addop term }
relop         = '<=' | '<' | '>' | '>=' | '==' | '!='
addop         = '+' | '-'
term          = factor { mulop factor }
mulop         = '*' | '/'
factor        = '(' compound_stmt ')' | simple_type | function_call

expr        = expr_rest [ relop expr ] | expr_rest
expr_rest   = null
            | function_call
            | compound_stmt
            | simple_type

simple_type = true | false | NUMBER | STRING | id_with_accessor | IDENTIFIER
id_with_accessor = IDENTIFIER { '.' IDENTIFIER }

array_decl  = '[' [ array_element_list ] ']'
array_element_list = array_pair { ',' array_pair }
array_pair  = static_scalar [ ':' static_scalar ]

function_call = IDENTIFIER '(' [ expr_list ] ')'
              | IDENTIFIER expr_list

expr_list       = { expr ',' } expr
identifier_list = IDENTIFIER { ',' IDENTIFIER }



/* Eliminating left recursion */
expr  = expr [ relop expr ] | function_call | simple_type
expr  = function_call expr' | simple_type expr'
expr' = [ relop expr] expr' | e
/* End eliminating left recursion */


expr = expr op expr

compound_stmt = simple_arith [ relop simple_arith ]
simple_arith  = term { addop term }
relop         = '<=' | '<' | '>' | '>=' | '==' | '!='
addop         = '+' | '-'
term          = factor { mulop factor }
mulop         = '*' | '/'
factor        = '(' compound_stmt ')' | simple_type | function_call

expr        = expr_addop [ relop expr_addop ]
expr_addop  = expr_term { addop expr_term }
expr_term   = expr_factor { mulop expr_factor }
expr_factor = '(' expr ')' | expr_rest

expr_rest   = null
            | function_call
            | simple_type

